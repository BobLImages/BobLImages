#rf Class file

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from joblib import dump, load

class RandomForestModel:
    def __init__(self):
        self.model = None
        self.columns = None

    def train(self, features, target):
        X_train, X_valid, y_train, y_valid = train_test_split(features, target, test_size=0.20, random_state=42)
        rf = RandomForestClassifier()
        rf.fit(X_train, y_train)

        # Set the trained model and columns
        self.model = rf
        self.columns = X_train.columns

        # Print or store any training metrics
        accuracy_train = rf.score(X_train, y_train)
        accuracy_valid = rf.score(X_valid, y_valid)
        print(f"Training Accuracy: {accuracy_train}")
        print(f"Validation Accuracy: {accuracy_valid}")

    def test(self, features, target):
        if self.model is None:
            print("Error: Model not trained.")
            return

        predictions = self.model.predict(features)
        accuracy = accuracy_score(target, prediction